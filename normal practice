#include<stdio.h>
int main()   //输出九九乘法表
{
	int a=0, i ;
	while(++a<=9)
	{
		printf("%d ", a);
		for(i=2;i<=9;++i)
		{
			printf("%2d ", i*a );
		}
	printf("\n");
	
	
	}
	return 0; 

}

//grasshopper jump
#include<stdio.h>
#include<string.h>
int main()
{
	int num, i, c=0, a, b=0, max=0, t, count=1;
	char alphabet[99];
	scanf("%s", &alphabet);
	num=strlen(alphabet);
	for(i=0;i<=(num-1);i++)
	{ if(alphabet[i]=='A'||alphabet[i]=='I'||
		alphabet[i]== 'E'||alphabet[i]=='O'||
		alphabet[i]=='U'||alphabet[i]=='Y')
        {a=c;
         c=i+1;
		 max=((c-a)>=b?(c-a):b);
		 b=max;
		 t=num-i;
		 }
	  else
	  count++;	
	}
	if(max!=0)
   {
    printf("%d\n", max>=t?max:t);
	}
	else
	printf("%d\n", count);
	return 0;
	
} 


//只用两种方式从a得到b
#include<stdio.h>
int main()
{
	int a, b, i, c, count=0;
	scanf("%d %d", &a, &b);
    c=b;
     while(a<b)
	{
	   if(b%2==0)
       {
	   b=b/2;
       count++;
	   }
       else 
	   {
       b=(b-1)/10;
       count++;
	   }
    }
      
	  if(a==b)
      {
      	printf("yes\n");
      	printf("%d\n", count);
        while(a<c)
        {
				if(c%2==0)
        		{printf("%d ", c);
        	     c=c/2;
                }
        	else
        	    {
				 printf("%d ", c);
        	     c=(c-1)/10;
				 }	  
        }
      }
        else
      	printf("NO\n");
return 0;
}

//统计字数
#include<stdio.h>
#include<ctype.h>
3include<string.h>
int main()
{
	char ch[254];
	int count=0, inword=0, length, a1, a2, b, j, numw=0;
	scanf("%s", &ch[254]);
	length=strlen(ch);
	for(i=0;i<=length;++i)
	{ 
      if((ch[i]=='_'||ch[i]==')')&&!inword)
      {
      	inword=1;
      	a1=i;
      }	
      if((ch[i]=='_'||ch[i]=='(')&&inword)
      {
      	inword=0;
      	a2=i-1;
      }
      count=a2-a1;
      

      //开始算括号里面的单词数

      if(ch[i]=='('&&!inword)
      {
      	while(ch[i]!=')')
      	{
      		++i;
           if(isalpha(ch[i])&&!inword)
           {
              inword=1;
              numw++;

           }
           if(!isalpha(ch[i])&&inword)
           {
           	inword=0;
           }

      	}
      	
      }

	}
       printf("%d %d", count, numw);

	return 0;
}



//水仙花数
#include<stdio.h>
#include<math.h>
int Coun(int a, int b)
{       int w, sum=0, m=0, ori, ori0, coun=0;
        long c, p=100000000;

		for (int j = b>=100?b:100; j <= a; ++j)
		{   p=100000000;
		    sum=0;
		    m=0;
		    ori=j;
			ori0=j;
			while(j!=0)
			{
				j=j/10;
				m++;
				
			}
			while(p>=1)
	       {
		    w=ori/p;
		    ori=ori-w*p;
		    p=p/10;
		    sum=sum+pow(w, m);
	       }
	       if (sum==ori0)
	       {
	       	coun++;
	       }
	       j=ori0;
		}
		return coun;
}
int main()
{
    int a, b, c, n;
	scanf("%d", &n);


	for (int i = 0; i < n; ++i)
	{
	    scanf("%d %d", &b, &a);
		c=a;
		a=(a>=b?a:b);
		b=(c>=b?b:c);
	    printf("%d\n", Coun(a, b));
	}
	return 0;
 }


 #include<stdio.h>
 int sump(int *start, int *end);
 int main()
 {
 	int marbles[10]={20, 10, 5, 39, 4, 16, 19, 26, 31, 20};
 	long answer;
 	answer=sump(marbles, marbles+10);
 	printf("%d\n", answer);
 	return 0;
 }
 int sump(int *start, int *end)
 {
 	int total=0;
 	while(start<end)
 	{
 		total+=*start++;
 	}
 	return total;
 }

//find all numbers disapeared in the array
#include<stdio.h>
#include<string.h>
int main()
{
	int n, i=1;
	scanf("%d", &n);
	int a[n];
	for(i=1; i<=n; i++)
	{
		scanf("%d", &a[i]);
    }
	 
	int b[n];
	for(i=1; i<=n; i++)
	{
		b[i]=0;
	}
    for(i=1; i<=n; i++)
    {
    	
    	int t;
    	t=a[i];
        b[t]=1;
    }
    for(i=1; i<=n; i++)
    {
    	if(b[i]==0)
    		printf("%d ", i);
    }

	return 0;
}

//island perimeter
#include<stdio.h>
int main(int argc, char const *argv[])
{
	int a[4][4], ln=0;
	
	for (int i = 0; i < 4; ++i)
	{
		for (int j= 0; j < 4; ++j)
		{
			scanf("%d", &a[i][j]);
		}
	}
	for (int i = 0; i < 4; ++i)
	{
		for (int j= 0; j < 4; ++j)
		{
			if (a[i][j]==1&&(a[i-1][j]==0||i==0)&&(a[i][j-1]==0||j==0))
			{
				ln+=4; 
			}
			if (a[i][j]==1&&(a[i-1][j]==0||i==0)&&a[i][j-1]==1)
			{
				 ln+=2;
			}
			if(a[i][j]==1&&(a[i-1][j]==1)&&(a[i][j-1]==0||j==0))
			{
				ln+=2;
			}
			
		}
	}
	printf("%d\n", ln);
	return 0;
}

//动态分配
#include<stdio.h>
#include<stdlib.h>
int main(int argc, char const *argv[])
{
	int *p;
	p=(int *)malloc(sizeof(int));
	*p = 10;
	printf("%d\n", *p);

	getchar(); getchar();  
		return 0;
}
//Fizz Buzz
#include<stdio.h>
int main()
{
	int n;
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
	{
		if ((i%3==0||i%5==0)&&i>=3)
		{
		
		if (i%3==0&&i>=3&&i%5!=0)
		{
			printf("Fizz\n");
		}
		if (i%5==0&&i>=5&&i%3!=0)
		{
            printf("Buzz\n");
		}
		if (i%5==0&&i%3==0&&i>5)
		{
			printf("FizzBuzz\n");
		}
        }
        else
        	printf("%d\n", i);

	}
	return 0;
}

//字符串排序
#include<stdio.h>
#include<string.h>
int main(int argc, char const *argv[])
{
	char s[100], sl[50], sr[50], t;
	int i, j=0, k=0, p, d;
	gets(s);
    d=strlen(s);
    
	for(i=1; i<d; i++)
	{
		if(s[i]>s[0])
		{
			sl[j++]=s[i];
			
		}
		else
			sr[k++]=s[i];
	}
	sl[j]='\0'; 

	for (i = 0; i < k-1; ++i)
	{
		for(p=i+1; p < k; ++p)
		{
			if(sr[i]>sr[p])
			{
				t=sr[i];
				sr[i]=sr[p];
				sr[p]=t;
			}
		}
	}
	sr[k]='\0';
	printf("%s", sl);
	printf("%c", s[0]);
	printf("%s", sr);

	return 0;
}

//拼数字
#include<stdio.h>
#include<string.h>
int main(int argc, char const *argv[])
{
	char s[100], ch[2]={' '};
	int e, d, g, i, re, check;
	while(1)
	{
		gets(s);
		d=strlen(s);
		if(d==0)
			break;

		e=1;
		g=0;
		check=1;
		for(i=d-1; i>=0; i--)
		{
            if(s[i]>='0'&&s[i]<='9')
            {
            	g+=(s[i]-'0')*e;
            	e=e*10;
            }
		}

		for(i=2; i<g/2; i++)
		{
			if(g%i==0)
              {re=g/i;check=0;break; }
		}
		if(check==1)
			re=g;

		printf("%d\n", re);
	}
	return 0;
}
	FILE* p;
	p=freopen("number.txt", "r", stdin);
	if(p==NULL)
	return -1;

//数字处理
#include<stdio.h>
int sum=1;
void Dfs(int n)
{
	for(int i=1; i<=n/2; i++)
	{
		sum++;
		if(i>1)
			Dfs(i);
	}
	return;
}
int main()
{
	int n, i;
	scanf("%d", &n);
	Dfs(n);
	printf("%d", sum);
   
	return 0;
}

//选出和为素数的
#include<stdio.h>
int n, k, total=0, x[20], book[20]={0}, box[21];
//-------------------
int Isprime(int sum)
{
	int i;
	if(sum==1)
	return 0;
	for (i = 2; i <= sum/2+1; ++i)
	{
		if(sum%i==0&&sum!=2)
			return 0;
	}
	return 1;
}
//~~~~~~~~~
void Dfs(int step, int sum)
{
	int d, i;
	if(step==k+1)
	{
		if (Isprime(sum)==1)
			total++;
		return;
	}

	for (i = 0; i < n; ++i)
	{
		if(book[i]==0)
		{
			box[step]=x[i];
            d=sum;
            book[i]=1;
            sum+=box[step];
            
            Dfs(step+1, sum);
            book[i]=0;
            sum=d;
		}
	}
	return;
}
//--------------
int Multiple(int q)
{
	int re=1, i;
	for(i=2; i<=q; i++)
	{
		re=re*i;
	}
	return re;
}
//~~~~~~~~~~~~~~~
int main(int argc, char const *argv[])
{
	int i;
	scanf("%d%d", &n, &k);
	
	for(i=0; i<n; i++)
	{
		scanf("%d", &x[i]);
	}
	Dfs(1, 0);
	
	total=total/Multiple(k);
	
	printf("\n%d\n", total);
	return 0;
}


//解一元方程改进版
#include<stdio.h>
#include<ctype.h>
#include<string.h>
int main(int argc, char const *argv[])
{
	char eq[20], ch;
	int  k=0, d=0, i=0, e=1, n, flag=0, sign, dig;

	float result=1;
	gets(eq);
    n=strlen(eq);
    while(i<n)
    {
    if(eq[i]=='=')
    	{e=-1; i++;}
	if(isdigit(eq[i]))
	    sign=1*e;
    if(eq[i]=='-')
    	{sign=-1*e; i++;
		}
    if(eq[i]=='+')
        {sign=1*e; i++;
		}
	
    //printf("sign is %d ", sign);
	for(i=i, dig=0; isdigit(eq[i])&&i<n; i++){
		dig=dig*10+(eq[i]-'0');
	    flag=1;
	}
	if(isalpha(eq[i])&&flag)
		{k+=sign*dig; i++;
		}
    else
    	if(isalpha(eq[i])&&!flag)
    		{ k+=sign; i++;}
    	else
    	d+=sign*dig;

    }
    //printf("k is %d , d is %d ", k, d);
    result=(d*-1.0)/k;
    printf("%.3f\n", result);

	return 0;
}

//寻找子串位置
#include <stdio.h>
#include<string.h>
int main()
{
    char a[101], b[101], ch='\0';
    int n, i=0, j=0, k, flag=0;
    scanf("%s%s", a, b);
    n=strlen(b);
    
    while(j<n)
    {
    	for(j=0, k=i; a[i]==b[j]; i++, j++)
    	flag=1;
    	
    	if(!flag)
    	i++;
	}
    printf("%d", k+1);
    return 0;
    
}

//单词翻转

#include <stdio.h>
#include<string.h>
int main()
{
    char a[30][30], s[200];
    int n, i=0, j=0, k=0, m, l;
    gets(s);
    
    
    while(s[k]!='\0')
    {
    	j=0;
    	while(s[k]!=' '&&s[k]!='\0')
    	{
    		a[i][j++]=s[k];k++;
		}
		a[i][j]='\0';
		if(s[k]=='\0')
		break;
		
		i++;
		k++;
	}
	//printf("%d %d\n", k, i);
	for(k=i; k>=0; k--)
	{
	  printf("%s ", a[k]);
		
		//printf(" haa");
	}
    
    return 0;
    
}

//最大公约数和最小公倍数问题
//找到满足x是最大公约数y是最小公倍数的整数对个数
#include<stdio.h>
int m, n, count=0;

int gcd(int x, int y)
{
	while(x!=y)
	{
		if(x>=y)
		{
			x=x-y;
		}
		else
			y=y-x;
	}
	return x;
}

int main()
{
   scanf("%d%d", &m, &n);
   int j, k, i;
   for(i=1; i<=n; i++)
   {
   	if(i<m||i%m!=0) continue;
   	for(j=1; j<=n; j++)
   	{
   		if(j<m||j%m!=0) continue;

   		k=gcd(i, j);
   		if (k==m&&n==i*j/k)
   		{
   			count++;
   		}
   	}
   }
   
   printf("%d", count);
   return 0;
}
//排序并去重
#include <stdio.h>
#include<string.h>

void selection_sort(int a[], int n)
{
	int i, j, k, t, max;
	for (i = 0; i < n-1 ; ++i)
	{
		for(max=a[i], k=i, j=i+1; j<n; j++)
		{

			if(max<a[j])
			{
				max=a[j];k=j;
			}
		}
		if(k!=i)
		{
			t=a[i];
			a[i]=max;
			a[k]=t;
		}
	}
}
int main()
{
    int n, m, i, j, count=0, result, max=0;
    int random[100], book[1000]={0};
    scanf("%d", &n);
    result=n;
    for(i=0; i<n; i++)
    {
    	scanf("%d", &random[i]);
    	book[random[i]]++;
    	if(max<random[i])
    	max=random[i];
	}
	for(i=1; i<=max; i++)
    {
    	if(book[i]>1)
    	result=result-book[i]+1;
	}
		
	selection_sort(random, n);
	
	printf("%d\n", result);
	
	for(j=n-1; j>=0; j--)
	{
	   if(book[random[j]]>1)
	   {
	   	 printf("%d ", random[j]);
	   	 j=j-book[random[j]]+1;
	   }
	   else
	   printf("%d ", random[j]);
	}
    
    return 0; 
}

//蛇形矩阵
#include<stdio.h>
int sum=1, e[100][100], row=0, column=0, temp;

void snakesquare(int n)
{
	int i, j, k, t, count=0;
	if(n==1)
	{
        e[column][row]=1;
		return;
	}
	
	
	for(i=n*n-3*n+3; i<=n*n; i+=n-1)
	{
		sum+=i;
		count++;
		for(j=temp-column-1, t=i; j>=column&&count==1; j--, t++){
			e[row][j]=t;
		}
		for(k=row, t=i; k<temp-row&&count==2; k++, t++){
			e[k][column]=t;
		}
		for(j=column, t=i; j<temp-column&&count==3; t++, j++){
			e[temp-row-1][j]=t;
		}
	}
	for(k=row, t=n*n-3*n+3; k<=temp-2-row; k++, t--){
		e[k][temp-column-1]=t;
	}
	row++; column++;
	
	snakesquare(n-2);
}
int main()
{
	int n, d, i, j;
	scanf("%d", &n);
	temp=n;
	snakesquare(n);
	
	for(i=0; i<n; i++){
		for(j=0; j<n; j++){
			printf("%d ", e[i][j]);
		}
		printf("\n");
	}
	
	printf("%d", sum);
	return 0;
}

//汉诺塔问题
#include<stdio.h>

void hannota(int n, char A, char C, char B)
{
	if(n==0)
		return ;
	hannota(n-1, A, B, C);
	printf("%d from %c to %c\n", n, A, C);
	hannota(n-1, B, C, A);
	return;
}
int main()
{
	int n, e, i;

	scanf("%d", &n);
	for(e=1, i=0; i<n; i++)
    {
        e=e*2;
    }
    printf("%d\n", e-1);
	hannota(n, 'A', 'C', 'B');
	getchar();getchar();
	return 0;
}


